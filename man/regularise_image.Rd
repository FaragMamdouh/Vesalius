% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/image_processing.R
\name{regularise_image}
\alias{regularise_image}
\title{regularise image}
\usage{
regularise_image(
  vesalius_assay,
  dimensions = seq(1, 3),
  embedding = "last",
  lambda = 1,
  niter = 100,
  normalise = TRUE,
  na.rm = TRUE,
  cores = 1,
  verbose = TRUE
)
}
\arguments{
\item{vesalius_assay}{a vesalius_assay object}

\item{lambda}{numeric - positive real numbers describing regularization
parameter (see details)}

\item{niter}{numeric - number of variance regularization iterations
(Default = 100)}

\item{normalise}{logical - If TRUE, regularized colour values will be
min max normalised.}

\item{na.rm}{logical - If TRUE, NAs are removed}

\item{verbose}{logical - progress message output.}

\item{invert}{logical - If TRUE, colours will be inverted i.e. 1 - colorValue
(background set to 1 instead of 0).}
}
\value{
a vesalius_assay
}
\description{
regularise_image denoise Vesalius images via variance regularization
}
\details{
Image regularization can be seen as a form of image denoising.
Details on each method can be found in the tvR package under the denoise2
function \href{tvR}{https://cran.r-project.org/web/packages/tvR/tvR.pdf}.
}
\examples{
\dontrun{
data(Vesalius)
# First we build a simple object
ves <- build_vesalius_object(coordinates, counts)
# We can do a simple run
ves <- build_vesalius_embeddings(ves)

# simple EQ
ves <- regularise_image(ves, embedding = "PCA")
}
}
