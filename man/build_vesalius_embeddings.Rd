% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/embeddings.R
\name{build_vesalius_embeddings}
\alias{build_vesalius_embeddings}
\title{Build vesalius embeddings.}
\usage{
build_vesalius_embeddings(
  vesalius_assay,
  dim_reduction = "PCA",
  normalisation = "log_norm",
  dimensions = 30,
  tensor_resolution = 1,
  filter_grid = 0.01,
  filter_threshold = 0.995,
  nfeatures = 2000,
  min_cutoff = "q5",
  remove_lsi_1 = TRUE,
  cores = 1,
  verbose = TRUE
)
}
\arguments{
\item{dim_reduction}{character string describing which dimensionality
reduction method should be used. One of the following:
"PCA", "PCA_L", "UMAP", "LSI", "LSI_UMAP".}

\item{normalisation}{character string describing which normalisation 
method to use. One of the following "log_norm", "SCT", "TFIDF", "raw".}

\item{dimensions}{numeric describing the number of Principle Components or
Latent space dimension to use. Default dimensions = 30}

\item{tensor_resolution}{numeric (range 0 - 1) describing the compression
ratio to be applied to the final image. Default = 1}

\item{filter_grid}{numeric (range 0 - 1) size of the grid used when filtering
outlier beads. Defined as a proportion of total image size. Default = 0.1}

\item{filter_threshold}{numeric (range 0 -1) describing the quantile
threshold at which tiles should be retained (seed details)}

\item{nfeatures}{numeric describing the number of variable features to use.}

\item{min_cutoff}{only used when dimensionality reduction method is
LSI or LSI_UMAP
cutoff for feature to be included in the VariableFeatures for the object.}

\item{remove_lsi_1}{logical only used when dimensionality reduction
method is LSI or LSI_UMAP
indicating if the first LSI component should be removed from further analysis
as it usually captures sequencing depth (technical variation)}

\item{cores}{numeric number of cores to use. Default = 1}

\item{verbose}{logical output progress message or not. Default = TRUE}

\item{vesalius}{a vesaliusObject (recommended) or vesalius_assay object.}

\item{assay}{character string describing which assay the embeddings 
should be performed on.}
}
\value{
vesalius_object or vesalius_assay 
 (depending on which was used as input)
}
\description{
Build image mebdding from spatial omics data.
}
\details{
The core principle behind vesalius is to convert spatial omics
data into an image. \code{build_vesalius_embeddings} allows you to convert
your omics data into a stack of gray scale images.
The stack hight will be equal to the number of dimenions you
selected excluding UMAP type as only 3 are availbale.

The algorithm is broadly to many spatial omics assays. As such, you can use
the \code{\link{build_vesalius_object}} function to create a single object
that will contain all your different assays.
You can select a different normalisation method
and dim_reudction method for each (see examples).

This function will first create image arrays by expanding punctual 
coordinates into tiles. Then, it will pre-process your data 
based on the normalisation method you  selected

Next, it will reduce dimesnionality and convert the latent space into a grey 
scale color palette for each dimension.

Every time you use this function on the same object, all previous trials 
will be retained and logged. You can later decide which method combination 
you would like to use. All other functions use the last entry as default.
}
\examples{
\dontrun{
data(Vesalius)
# First we build a simple object
ves <- build_vesalius_object(coordinates, counts)
# We can do a simple run 
ves <- build_vesalius_embeddings(ves)
# maybe we want to try a different method 
# both will be stored in the object
ves <- build_vesalius_embeddings(ves, dim_reduction = "UMAP")
}
}
