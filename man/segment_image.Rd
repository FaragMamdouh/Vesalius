% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/image_processing.R
\name{segment_image}
\alias{segment_image}
\title{segment image}
\usage{
segment_image(
  vesalius_assay,
  dimensions = seq(1, 3),
  embedding = "last",
  method = "kmeans",
  col_resolution = 10,
  verbose = TRUE
)
}
\arguments{
\item{vesalius_assay}{a vesalius_assay object}

\item{dimensions}{numeric vector of latent space dimensions to use.}

\item{embedding}{character string describing which embedding should
be used.}

\item{method}{character string for which method should be used for
segmentation. Select from "kmeans", "louvain", or "leiden".}

\item{col_resolution}{numeric colour resolution used for segmentation. 
(see details)}

\item{verbose}{logical - progress message output.}

\item{use_center}{logical - If TRUE, only the center pixel value will be used
during segmentation. If FALSE, all pixels will be used (see details)}
}
\value{
a vesalius_assay object
}
\description{
segment vesalius images to find initial territories
}
\details{
Applying image segmentation ensures a reduction in colour
complexity.

Vesalius provides 3 different methods for clustering colours and
reducing color complexity: **Kmeans**, **Louvain**, and **Leiden**.

In the case of kmeans clustering the \code{col_resolution} argument
shows the number of colours that the images should be reduced to.
In this case, \code{col_resolution} should be an integer and
we suggest first looking at values between 3 and 20.

In the case of **leiden** and **louvain** clustering, the
\code{col_resolution} is the granularity of the clustering.
In this case, we suggest using values between 0.01 and 1 to start with.
We recommned uisng **louvain** clustering over **leiden** in 
this context. 

The optimal \code{col_resolution} will depend on your interest and 
biological question at hand. You might be interested in more or less
granular territories. Along with smoothing, the number of segments is
one way to control this granularity.
}
\examples{
\dontrun{
data(vesalius)
# First we build a simple object
ves <- build_vesalius_object(coordinates, counts)
# We can do a simple run
ves <- build_vesalius_embeddings(ves)

# simple smoothing
ves <- smooth_image(ves, dimensions = seq(1, 30))

# quick segmentation
ves <- segment_image(ves, dimensions = seq(1, 30))
}
}
