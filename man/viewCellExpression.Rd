% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/viz.R
\name{viewCellExpression}
\alias{viewCellExpression}
\title{viewCellExpression - plot gene expression in cell of choice}
\usage{
viewCellExpression(
  image,
  counts,
  cells,
  gene = NULL,
  ter1 = NULL,
  ter2 = NULL,
  normalise = FALSE,
  cex = 10
)
}
\arguments{
\item{image}{a Vesalius data frame containing barcodes, x, y, cc, value,
cluster, and territory.}

\item{counts}{count matrix - either matrix, sparse matrix or seurat object
This matrix should contain genes as rownames and cells/barcodes as colnames}

\item{cells}{- character vector containing cells of interest.}

\item{gene}{character - gene of interest (only on gene at a time)}

\item{ter1}{vector/integer - Territory ID in which gene expression will be viewed.
See details.}

\item{ter2}{vector/integer - Territory ID in which gene expression will be viewed.
See details.}

\item{normalise}{logical - If TRUE, gene expression values will be min/max
normalised.}

\item{cex}{numeric - font size modulator}
}
\value{
a ggplot object
}
\description{
viewCellExpression - plot gene expression in cell of choice
}
\details{
Visualization of gene expression in selected territories.
The purpose of this function is to contrast the expression of genes between
different territories.
The cells argument should be supplied as a vector of barcodes containing
all barcodes of the cell type of interest. Theoretically, you can supply
more than one cell type in this vector but Vesalius will treat them as single
cell type.
If you do not provide any territory and leave the \code{ter1} and \code{ter2}
as NULL, this function will plot the expression of your gene of interest
in your cell type of interest accross the whole ST assay.
Supplying territories to only one of \code{ter1} or \code{ter2} will plot
cell type of interest in one set of territories.
Supplying territories to both will contrast expression between territories
}
\examples{
\dontrun{
data(vesalius)
# Seurat pre-processing
image <- NormalizeData(vesalius)
image <- FindVariableFeatures(image, nfeatures = 2000)
image <- ScaleData(image)
# converting to rgb
image <- rgbPCA(image,slices = 1)
image <- buildImageArray(image, sliceID=1)
# One segmentation round
image <- iterativeSegmentation.array(image)
image <- isolateTerritories.array(image, minBar = 5)
# For the example we will take a random selection of barcodes
cells <- GetAssayData(vesalius, slot = "data")
cells <- sample(colnames(cells), 200, replace =F)
g <- viewCellExpression(image, vesalius,cells,
                        gene = "Cst3",ter1 = 1,ter2=2)
}
}
